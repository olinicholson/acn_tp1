import numpy as np
import sys
import os
import matplotlib.pyplot as plt
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from main import simulate_planes, minutos_a_hora
from ejercicio6 import simulate_storm_closure  # importa la l칩gica de tormenta
from tqdm import tqdm as tqdm_ext

if __name__ == "__main__":
    print("Simulaci칩n Monte Carlo comparativa: D칤a Normal vs D칤a con Tormenta")
    print("=" * 70)

    lambda_prob_mc = 0.2
    total_minutes = 1080
    N = 1000  # cantidad de simulaciones

    print(f"Par치metros de simulaci칩n:")
    print(f"  Lambda de aparici칩n: {lambda_prob_mc} aviones/minuto")
    print(f"  Duraci칩n: {total_minutes} minutos ({total_minutes/60:.1f} horas)")
    print(f"  Horario: 6:00am a {minutos_a_hora(total_minutes)}")
    print(f"  Iteraciones Monte Carlo: {N}")
    print()

    # 游댐 Fijamos un horario de tormenta para TODAS las simulaciones
    import random
    storm_start_fixed = random.randint(0, total_minutes - 30)

    # --- D칤a normal ---
    desvios_normal, aterrizajes_normal, totales_normal = [], [], []
    simulate_planes.use_tqdm = False
    for _ in tqdm_ext(range(N), desc="Monte Carlo (Normal)", unit="sim"):
        planes_mc, _ = simulate_planes(lambda_prob=lambda_prob_mc, total_minutes=total_minutes)
        landed = len([p for p in planes_mc if p.status == 'landed'])
        montevideo = len([p for p in planes_mc if p.status == 'montevideo'])
        total = landed + montevideo
        if total > 0:
            desvios_normal.append(montevideo / total)
            aterrizajes_normal.append(landed / total)
            totales_normal.append(total)

    # --- D칤a con tormenta ---
    desvios_tormenta, aterrizajes_tormenta, totales_tormenta, afectados_tormenta = [], [], [], []
    for _ in tqdm_ext(range(N), desc="Monte Carlo (Tormenta)", unit="sim"):
        planes_mc, landed, montevideo, afectados, tiempo_espera, max_cola, storm_start, storm_end = simulate_storm_closure(
            lambda_prob=lambda_prob_mc,
            total_minutes=total_minutes,
            storm_start=storm_start_fixed  # 游녣 usamos SIEMPRE el mismo horario
        )
        total = landed + montevideo
        if total > 0:
            desvios_tormenta.append(montevideo / total)
            aterrizajes_tormenta.append(landed / total)
            totales_tormenta.append(total)
            afectados_tormenta.append(afectados)

    # --- Resultados ---
    print("\n游늵 Resultados comparativos (promedios de 1000 simulaciones):")
    print("-" * 70)
    print(f"俱뫮잺 D칤a Normal:")
    print(f"   Promedio % desv칤os:     {100 * np.mean(desvios_normal):.1f}%")
    print(f"   Promedio % aterrizajes: {100 * np.mean(aterrizajes_normal):.1f}%")
    print(f"   Promedio total aviones: {np.mean(totales_normal):.1f}")

    print(f"\n俱뫮잺 D칤a con Tormenta (cierre 30 min en {minutos_a_hora(storm_start_fixed)}):")
    print(f"   Promedio % desv칤os:     {100 * np.mean(desvios_tormenta):.1f}%")
    print(f"   Promedio % aterrizajes: {100 * np.mean(aterrizajes_tormenta):.1f}%")
    print(f"   Promedio total aviones: {np.mean(totales_tormenta):.1f}")
    print(f"   Promedio aviones afectados por cierre: {np.mean(afectados_tormenta):.1f}")

    diff = 100 * (np.mean(desvios_tormenta) - np.mean(desvios_normal))
    print("\n游늳 Impacto promedio de la tormenta:")
    print(f"   Incremento de desv칤os: {diff:.1f} puntos porcentuales")